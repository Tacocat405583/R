compute_tax1 <- function(price) {
if (price <= 1000000) {
return(price * 0.015)  # 1.5% tax for prices <= $1,000,000
} else if (price > 1000000 && price < 3000000) {
return(price * 0.0115)  # 1.15% tax for prices between $1,000,000 and $3,000,000
} else {
return(price * 0.01)  # 1% tax for prices >= $3,000,000
}
}
CleanHousing$PropertyTax1 <- sapply(CleanHousing$PricePerArea,compute_tax)
compute_tax1 <- function(price) {
if (price <= 1000000) {
return(price * 0.015)  # 1.5% tax for prices <= $1,000,000
} else if (price > 1000000 && price < 3000000) {
return(price * 0.0115)  # 1.15% tax for prices between $1,000,000 and $3,000,000
} else {
return(price * 0.01)  # 1% tax for prices >= $3,000,000
}
}
CleanHousing$PropertyTax1 <- sapply(CleanHousing$PricePerArea,compute_tax)
setwd("C:/Users/Nicolas/Desktop/Code/R/")
library(readxl)
library(Hmisc)
Housing <- read_excel("CleanMelbourneHousing.xlsx")
View(Housing)
Housing$Price <- as.numeric(Housing$Price)
Housing$Landsize <- as.numeric(Housing$Landsize)
Housing$Rooms <- as.numeric(Housing$Rooms)
# Same data frame as before but with regionname
CleanHousing <- data.frame(
'Price' = Housing$Price,
'LandSize' = Housing$Landsize,
'Rooms' = Housing$Rooms,
'Date' = Housing$Date,
'Regionname' = Housing$Regionname
)
plot(CleanHousing$LandSize,CleanHousing$Price,main="Price vs Land Size",
xlab="Land Size",ylab = "Price",col = "red")
RangeHousing <- subset(CleanHousing,LandSize >= 200 & LandSize <=  600 )
model <- lm(Price ~ LandSize,data = RangeHousing)
#plot regression line
plot(RangeHousing$LandSize,RangeHousing$Price,main="Price vs. Land Size (200-600)",
xlab = "Land Size", ylab = "Price", col = "green",)
abline(model,col="red")
#find R^2 value
summary(model)
# Create vectors for each region based on the updated region names that I could find
#I can only apologize
Northern_Metropolitan <- c()
Southern_Metropolitan <- c()
South_Eastern_Metropolitan <- c()
South_Western_Metropolitan <- c()
Western_Metropolitan <- c()
Eastern_Metropolitan <- c()
Northern_Victoria <- c()
Western_Victoria <- c()
Eastern_Victoria <- c()
Southern_Victoria <- c()
# Populate vectors with home prices based on region
for (i in 1:nrow(CleanHousing)) {
region <- CleanHousing$Regionname[i]
price <- CleanHousing$Price[i]
if (region == "Northern Metropolitan") {
Northern_Metropolitan <- c(Northern_Metropolitan, price)
} else if (region == "Southern Metropolitan") {
Southern_Metropolitan <- c(Southern_Metropolitan, price)
} else if (region == "South-Eastern Metropolitan") {
South_Eastern_Metropolitan <- c(South_Eastern_Metropolitan, price)
} else if (region == "South-Western Metropolitan") {
South_Western_Metropolitan <- c(South_Western_Metropolitan, price)
} else if (region == "Western Metropolitan") {
Western_Metropolitan <- c(Western_Metropolitan, price)
} else if (region == "Eastern Metropolitan") {
Eastern_Metropolitan <- c(Eastern_Metropolitan, price)
} else if (region == "Northern Victoria") {
Northern_Victoria <- c(Northern_Victoria, price)
} else if (region == "Western Victoria") {
Western_Victoria <- c(Western_Victoria, price)
} else if (region == "Eastern Victoria") {
Eastern_Victoria <- c(Eastern_Victoria, price)
} else if (region == "Southern Victoria") {
Southern_Victoria <- c(Southern_Victoria, price)
}
}
# Calculate mean and SD for each region
RegionStats <- data.frame(
Regionname = c("Northern Metropolitan", "Southern Metropolitan", "South-Eastern Metropolitan",
"South-Western Metropolitan", "Western Metropolitan", "Eastern Metropolitan",
"Northern Victoria", "Western Victoria", "Eastern Victoria", "Southern Victoria"),
Mean = c(mean(Northern_Metropolitan), mean(Southern_Metropolitan), mean(South_Eastern_Metropolitan),
mean(South_Western_Metropolitan), mean(Western_Metropolitan), mean(Eastern_Metropolitan),
mean(Northern_Victoria), mean(Western_Victoria), mean(Eastern_Victoria), mean(Southern_Victoria)),
SD = c(sd(Northern_Metropolitan), sd(Southern_Metropolitan), sd(South_Eastern_Metropolitan),
sd(South_Western_Metropolitan), sd(Western_Metropolitan), sd(Eastern_Metropolitan),
sd(Northern_Victoria), sd(Western_Victoria), sd(Eastern_Victoria), sd(Southern_Victoria))
)
RegionStats
# Find the most expensive value
summary(RegionStats$Mean)
# Remove NAs before finding the maximum value
RegionStats_clean <- RegionStats[!is.na(RegionStats$Mean) ] #na due to error in cleaning so I have to use function
# Find the maximum value of the Mean column
max_value <- max(RegionStats_clean$Mean)
# Remove NAs before finding the maximum value
RegionStats_clean <- RegionStats[!is.na(RegionStats$Mean), ] #na due to error in cleaning so I have to use function
# Find the maximum value of the Mean column
max_value <- max(RegionStats_clean$Mean)
# Find the region corresponding to the maximum value
# by checking each row to see if it matches the max value
#it works aslong as names are in order
most_expensive_region <- RegionStats_clean$Regionname[RegionStats_clean$Mean == max_value]
most_expensive_region
CleanHousing$PricePerArea <- CleanHousing$Price/CleanHousing$LandSize
#due to missing data, again i have to use, is.na
sum(is.na(CleanHousing$PricePerArea))
cleaned_data <- CleanHousing$PricePerArea[!is.na(CleanHousing$PricePerArea)]
summary(cleaned_data)
var(cleaned_data)
#Found a division by error after testing
CleanHousing$PricePerArea[CleanHousing$LandSize == 0 | is.na(CleanHousing$LandSize)] <- 0
# Now calculate the 90% confidence interval
cleaned_data <- CleanHousing$PricePerArea[CleanHousing$PricePerArea != 0]  # Exclude 0 values from analysis
# Perform the t-test to calculate the confidence interval
t.test(cleaned_data,
mu=mean(CleanHousing$PricePerArea),
conf.level = 0.90,
alternative = 'two.sided')
#(6)
# Initialize an empty vector to store the results
Region <- c()
Lower_CI <- c()
Upper_CI <- c()
# Loop through each region and calculate the 90% confidence interval
for(region in regions) {
# Extract data for the region
region_data <- CleanHousing$PricePerArea[CleanHousing$Regionname == region]
# Calculate the confidence interval
t_result <- t.test(region_data, conf.level = 0.90)
# Store the results in the vectors
Region <- c(Region, region)
Lower_CI <- c(Lower_CI, t_result$conf.int[1])
Upper_CI <- c(Upper_CI, t_result$conf.int[2])
}
regions <- unique(CleanHousing$Regionname)
# Loop through each region and calculate the 90% confidence interval
for(region in regions) {
# Extract data for the region
region_data <- CleanHousing$PricePerArea[CleanHousing$Regionname == region]
# Calculate the confidence interval
t_result <- t.test(region_data, conf.level = 0.90)
# Store the results in the vectors
Region <- c(Region, region)
Lower_CI <- c(Lower_CI, t_result$conf.int[1])
Upper_CI <- c(Upper_CI, t_result$conf.int[2])
}
# Create a data frame with the results
confidence_intervals <- data.frame(Region, Lower_CI, Upper_CI)
# Print the results
print(confidence_intervals)
# Loop through each region and calculate the 90% confidence interval
for(region in regions) {
# Extract data for the region
region_data <- CleanHousing$PricePerArea[CleanHousing$Regionname == region]
# Calculate the confidence interval
t_result <- t.test(region_data, conf.level = 0.90)
# Store the results in the vectors
Region <- c(Region, region)
Lower_CI <- c(Lower_CI, t_result$conf.int[1])
Upper_CI <- c(Upper_CI, t_result$conf.int[2])
}
# Create a data frame with the results
confidence_intervals <- data.frame(Region, Lower_CI, Upper_CI)
# Print the results
print(confidence_intervals)
# initialize an empty vector for the regions and results to keep it tidy
Region <- c()
Result <- c()
# Loop through each region in RegionStats
for(i in 1:nrow(RegionStats)) {
# Subset the data for the current region
region_data <- CleanHousing$Price[CleanHousing$Regionname == RegionStats$Regionname[i]]
# Perform the t-test for the region with a 90% confidence level and two-sided alternative as previously done
t_result <- t.test(region_data, mu = mean(CleanHousing$PricePerArea), conf.level = 0.90, alternative = 'two.sided')
# Append region name and the p-value just to keep it nice
Region <- append(Region, RegionStats$Regionname[i])
Result <- append(Result, t_result$p.value)
}
# initialize an empty vector for the regions and results to keep it tidy
Region <- c()
Result <- c()
# Loop through each region in RegionStats
for(i in 1:nrow(RegionStats)) {
# Subset the data for the current region
region_data <- CleanHousing$Price[CleanHousing$Regionname == RegionStats$Regionname[i]]
# Perform the t-test for the region with a 90% confidence level and two-sided alternative as previously done
t_result <- t.test(region_data, mu = mean(CleanHousing$PricePerArea), conf.level = 0.90, alternative = 'two.sided')
# Append region name and the p-value just to keep it nice
Region <- append(Region, RegionStats$Regionname[i])
Result <- append(Result, t_result$p.value)
}
# Populate vectors with home prices based on region
for (i in 1:nrow(CleanHousing)) {
region <- CleanHousing$Regionname[i]
price <- CleanHousing$Price[i]
if (region == "Northern Metropolitan") {
Northern_Metropolitan <- c(Northern_Metropolitan, price)
} else if (region == "Southern Metropolitan") {
Southern_Metropolitan <- c(Southern_Metropolitan, price)
} else if (region == "South-Eastern Metropolitan") {
South_Eastern_Metropolitan <- c(South_Eastern_Metropolitan, price)
} else if (region == "South-Western Metropolitan") {
South_Western_Metropolitan <- c(South_Western_Metropolitan, price)
} else if (region == "Western Metropolitan") {
Western_Metropolitan <- c(Western_Metropolitan, price)
} else if (region == "Eastern Metropolitan") {
Eastern_Metropolitan <- c(Eastern_Metropolitan, price)
} else if (region == "Northern Victoria") {
Northern_Victoria <- c(Northern_Victoria, price)
} else if (region == "Western Victoria") {
Western_Victoria <- c(Western_Victoria, price)
} else if (region == "Eastern Victoria") {
Eastern_Victoria <- c(Eastern_Victoria, price)
} else if (region == "Southern Victoria") {
Southern_Victoria <- c(Southern_Victoria, price)
}
}
# Calculate mean and SD for each region
RegionStats <- data.frame(
Regionname = c("Northern Metropolitan", "Southern Metropolitan", "South-Eastern Metropolitan",
"South-Western Metropolitan", "Western Metropolitan", "Eastern Metropolitan",
"Northern Victoria", "Western Victoria", "Eastern Victoria", "Southern Victoria"),
Mean = c(mean(Northern_Metropolitan), mean(Southern_Metropolitan), mean(South_Eastern_Metropolitan),
mean(South_Western_Metropolitan), mean(Western_Metropolitan), mean(Eastern_Metropolitan),
mean(Northern_Victoria), mean(Western_Victoria), mean(Eastern_Victoria), mean(Southern_Victoria)),
SD = c(sd(Northern_Metropolitan), sd(Southern_Metropolitan), sd(South_Eastern_Metropolitan),
sd(South_Western_Metropolitan), sd(Western_Metropolitan), sd(Eastern_Metropolitan),
sd(Northern_Victoria), sd(Western_Victoria), sd(Eastern_Victoria), sd(Southern_Victoria))
)
CleanHousing$PricePerArea <- CleanHousing$Price/CleanHousing$LandSize
cleaned_data <- CleanHousing$PricePerArea[!is.na(CleanHousing$PricePerArea)]
#Found a division by error after testing
CleanHousing$PricePerArea[CleanHousing$LandSize == 0 | is.na(CleanHousing$LandSize)] <- 0
# Now calculate the 90% confidence interval
cleaned_data <- CleanHousing$PricePerArea[CleanHousing$PricePerArea != 0]  # Exclude 0 values from analysis
# Perform the t-test to calculate the confidence interval
t.test(cleaned_data,
mu=mean(CleanHousing$PricePerArea),
conf.level = 0.90,
alternative = 'two.sided')
# initialize an empty vector for the regions and results to keep it tidy
Region <- c()
Result <- c()
# Loop through each region in RegionStats
for(i in 1:nrow(RegionStats)) {
# Subset the data for the current region
region_data <- CleanHousing$Price[CleanHousing$Regionname == RegionStats$Regionname[i]]
# Perform the t-test for the region with a 90% confidence level and two-sided alternative as previously done
t_result <- t.test(region_data, mu = mean(CleanHousing$PricePerArea), conf.level = 0.90, alternative = 'two.sided')
# Append region name and the p-value just to keep it nice
Region <- append(Region, RegionStats$Regionname[i])
Result <- append(Result, t_result$p.value)
}
# Initialize empty vectors to store results
Region <- c()
LowerCI <- c()
UpperCI <- c()
RegionMean <- c()
# Loop through each region
for (i in 1:nrow(RegionStats)) {
# Subset the data for the current region
region_data <- CleanHousing$PricePerArea[CleanHousing$Regionname == RegionStats$Regionname[i]]
# Perform the t-test for the 90% confidence interval
t_result <- t.test(region_data, conf.level = 0.90)
# Append the region name, lower and upper bounds of the CI, and the mean
Region <- append(Region, RegionStats$Regionname[i])
LowerCI <- append(LowerCI, t_result$conf.int[1])
UpperCI <- append(UpperCI, t_result$conf.int[2])
RegionMean <- append(RegionMean, mean(region_data))
}
# Initialize empty vectors to store the region names and results
Region <- c()
Result <- c()
# Calculate the overall mean of PricePerArea
overall_mean <- mean(CleanHousing$PricePerArea)
# Loop through each region in RegionStats
for (i in 1:nrow(RegionStats)) {
# Subset the data for the current region
region_data <- CleanHousing$PricePerArea[CleanHousing$Regionname == RegionStats$Regionname[i]]
# Perform the one-sample t-test to compare region mean to the overall mean
t_result <- t.test(region_data, mu = overall_mean, conf.level = 0.90)
# Append region name and p-value (optional)
Region <- append(Region, RegionStats$Regionname[i])
Result <- append(Result, t_result$p.value)
}
# Calculate the overall mean of PricePerArea
overall_mean <- mean(CleanHousing$PricePerArea)
# Loop through each region in RegionStats
for (i in 1:nrow(RegionStats)) {
# Subset the data for the current region
region_data <- CleanHousing$PricePerArea[CleanHousing$Regionname == RegionStats$Regionname[i]]
# Check if there are enough observations for the t-test (at least 2)
if (length(region_data) >= 2) {
# Perform the one-sample t-test to compare region mean to the overall mean
t_result <- t.test(region_data, mu = overall_mean, conf.level = 0.90)
# Append region name and p-value to the results
Region <- append(Region, RegionStats$Regionname[i])
Result <- append(Result, t_result$p.value)
} else {
# If there are not enough data points, append NA for that region
Region <- append(Region, RegionStats$Regionname[i])
Result <- append(Result, NA)
}
}
# Create a data frame to display the results
t_test_df <- data.frame(Region, Result)
# Print the results
print(t_test_df)
# Tax based on Price Per Area
compute_tax2 <- function(PPA) {
if (PPA <= 3500) {
return(PPA * 0.01)  # 1% tax for PPA <= 3500
} else if (PPA > 3500 && PPA <= 15000) {
return(PPA * 0.0115)  # 1.15% tax for 3500 < PPA <= 15000
} else {
return(PPA * 0.015)  # 1.5% tax for PPA > 15000
}
}
CleanHousing$PropertyTax2 <- sapply(CleanHousing$PricePerArea, compute_tax2)
View(CleanHousing)
CleanHousing$Difference <- CleanHousing$PropertyTax2 - CleanHousing$PropertyTax1
TotalRevenueChange <- sum(CleanHousing$Difference)
TotalRevenueChange
compute_tax1 <- function(price) {
if (price <= 1000000) {
return(price * 0.015)  # 1.5% tax for prices <= $1,000,000
} else if (price > 1000000 && price < 3000000) {
return(price * 0.0115)  # 1.15% tax for prices between $1,000,000 and $3,000,000
} else {
return(price * 0.01)  # 1% tax for prices >= $3,000,000
}
}
CleanHousing$PropertyTax1 <- sapply(CleanHousing$PricePerArea,compute_tax)
CleanHousing$PropertyTax1 <- sapply(CleanHousing$PricePerArea,compute_tax1)
View(CleanHousing)
CleanHousing$Difference <- CleanHousing$PropertyTax2 - CleanHousing$PropertyTax1
TotalRevenueChange <- sum(CleanHousing$Difference)
TotalRevenueChange
# Tax based on Price Per Area
compute_tax2 <- function(PPA) {
if (PPA <= 3500) {
return(PPA * 0.01)  # 1% tax for PPA <= 3500
} else if (PPA > 3500 && PPA <= 15000) {
return(PPA * 0.0115)  # 1.15% tax for 3500 < PPA <= 15000
} else {
return(PPA * 0.015)  # 1.5% tax for PPA > 15000
}
}
